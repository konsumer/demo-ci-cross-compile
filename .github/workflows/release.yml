# this will build for window/linux on x86_64 and linux on arm64/arm7 and mac universal (x86_64/arm64)
# "Archive artifacts" is optional, and is just to show build-output before release is made

name: Release

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'

jobs:
  create_release:
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        with:
          draft: false
          prerelease: false
          release_name: Automated Release ${{ github.ref }}
          tag_name: ${{ github.ref }}
          body: This is an automated release for ${{ github.ref }}.
        env:
          GITHUB_TOKEN: ${{ github.token }}
  
  windows:
    runs-on: windows-latest
    needs: create_release
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Cache Cmake
        uses: actions/cache@v3
        with:
          path: build-windows-x86_64/
          key: windows-x86_64-cmake
      - name: Build
        run: |
          mkdir -p build-windows-x86_64
          cd build-windows-x86_64
          cmake .. -G "MinGW Makefiles"
          make
      - name: Archive Release
        uses: thedoctor0/zip-release@main
        with:
          type: zip
          filename: mygame-windows.zip
          directory: build-windows-x86_64
          path: my_raylib_game.exe
      - name: Attach Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: build-windows-x86_64/mygame-windows.zip
          asset_name: mygame-windows.zip
          asset_content_type: application/octet-stream

  mac:
    runs-on: macos-latest
    needs: create_release
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Cache Cmake
        uses: actions/cache@v3
        with:
          path: build-mac-universal/
          key: mac-cmake
      - name: Build
        run: |
          mkdir -p build-mac-universal
          cd build-mac-universal/
          cmake ..
          make
        env:
          CMAKE_OSX_ARCHITECTURES: "arm64;x86_64"
      - name: Archive Release
        uses: thedoctor0/zip-release@main
        with:
          type: zip
          filename: mygame-mac.zip
          directory: build-mac-universal
          path: my_raylib_game
      - name: Attach Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: build-mac-universal/mygame-mac.zip
          asset_name: mygame-mac.zip
          asset_content_type: application/octet-stream
      
  linux:
    runs-on: ubuntu-latest
    needs: create_release
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Cache Cmake (x86_64)
        uses: actions/cache@v3
        with:
          path: build-linux-x86_64/
          key: linux-x86_64-cmake
      - name: Cache Cmake (arm64)
        uses: actions/cache@v3
        with:
          path: build-linux-arm64/
          key: linux-arm64-cmake
      - name: Cache Cmake (arm7)
        uses: actions/cache@v3
        with:
          path: build-linux-arm7/
          key: linux-arm7-cmake
      - name: Setup Qemu (for arm-builds)
        run: |
          sudo apt-get update
          sudo apt-get install -y qemu qemu-system-misc qemu-user-static qemu-user binfmt-support
      - name: Build (arm64)
        uses: addnab/docker-run-action@v3
        with:
          image: konsumer/node-raylib-builder:latest
          options: -v ${{ github.workspace }}:/workdir --platform linux/arm64 -e PLATFORM=PLATFORM_DRM
          run: |
            mkdir -p build-linux-arm64
            cd build-linux-arm64/
            cmake ..
            make
      - name: Build (arm7)
        uses: addnab/docker-run-action@v3
        with:
          image: konsumer/node-raylib-builder:latest
          options: -v ${{ github.workspace }}:/workdir --platform linux/arm/v7 -e PLATFORM=PLATFORM_DRM
          run: |
            mkdir -p build-linux-arm7
            cd build-linux-arm7/
            cmake ..
            make
      - name: Build (x86_64)
        run: |
          sudo apt-get install -y xorg-dev libglu1-mesa-dev
          mkdir -p build-linux-x86_64
          cd build-linux-x86_64/
          cmake ..
          make
          cd ..
          sudo chown -R `whoami` build*
      
      - name: Archive Release (x86_64)
        uses: thedoctor0/zip-release@main
        with:
          type: zip
          filename: mygame-linux-x86_64.zip
          directory: build-linux-x86_64
          path: my_raylib_game
      - name: Attach Release (x86_64)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: build-linux-x86_64/mygame-linux-x86_64.zip
          asset_name: mygame-linux-x86_64.zip
          asset_content_type: application/octet-stream
      - name: Archive Release (arm7)
        uses: thedoctor0/zip-release@main
        with:
          type: zip
          filename: mygame-linux-arm7.zip
          directory: build-linux-arm7
          path: my_raylib_game
      - name: Attach Release (arm7)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: build-linux-arm7/mygame-linux-arm7.zip
          asset_name: mygame-linux-arm7.zip
          asset_content_type: application/octet-stream
      - name: Archive Release (arm64)
        uses: thedoctor0/zip-release@main
        with:
          type: zip
          filename: mygame-linux-arm64.zip
          directory: build-linux-arm64
          path: my_raylib_game
      - name: Attach Release (arm64)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: build-linux-arm64/mygame-linux-arm64.zip
          asset_name: mygame-linux-arm64.zip
          asset_content_type: application/octet-stream
  

