name: Release

on: push

# this will build for window/linux on x86_64 and linux on arm64/arm7 and mac universal (x86_64/arm64)
# TODO: pre-build docker containers for linux arm64/arm7


jobs:
  publish:
    runs-on: ubuntu-latest
    needs: [windows, mac, linux]
    steps:
      - name: zip windows
        uses: vimtor/action-zip@v1
        with:
          files: build-windows-x86_64/my_raylib_game.exe
          recursive: false
          dest: my_raylib_game-windows.zip
      - name: zip mac
        uses: vimtor/action-zip@v1
        with:
          files: build-mac-universal/my_raylib_game
          recursive: false
          dest: my_raylib_game-mac.zip
      - name: zip linux-x86_64
        uses: vimtor/action-zip@v1
        with:
          files: build-linux-x86_64/my_raylib_game
          recursive: false
          dest: my_raylib_game-linux-x86_64.zip
      - name: zip linux-arm64
        uses: vimtor/action-zip@v1
        with:
          files: build-linux-arm64/my_raylib_game
          recursive: false
          dest: my_raylib_game-linux-arm64.zip
      - name: zip linux-arm7
        uses: vimtor/action-zip@v1
        with:
          files: build-linux-arm7/my_raylib_game
          recursive: false
          dest: my_raylib_game-linux-arm7.zip
      - name: create_release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          files: |
            my_raylib_game-windows.zip
            my_raylib_game-mac.zip
            my_raylib_game-linux-x86_64.zip
            my_raylib_game-linux-arm64.zip
            my_raylib_game-linux-arm7.zip
          
  
  windows:
    runs-on: windows-latest
    steps:
      - name: checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: windows x86_64
        run: |
          mkdir -p build-windows-x86_64
          cd build-windows-x86_64
          cmake .. -G "MinGW Makefiles"
          make
      - name: Archive artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-windows-x86_64
          path: build-windows-x86_64/my_raylib_game.exe

  mac:
    runs-on: macos-latest
    steps:
      - name: checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: mac universal
        run: |
          mkdir -p build-mac-universal
          cd build-mac-universal/
          cmake ..
          make
        env:
          CMAKE_OSX_ARCHITECTURES: "arm64;x86_64"
      - name: Archive artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-mac-universal
          path: build-mac-universal/my_raylib_game
      
  linux:
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: setup
        run: |
          sudo apt-get update
          sudo apt-get install -y qemu qemu-system-misc qemu-user-static qemu-user binfmt-support
      - name: linux x86_64
        run: |
          sudo apt-get install -y xorg-dev libglu1-mesa-dev
          mkdir -p build-linux-x86_64
          cd build-linux-x86_64/
          cmake ..
          make
      - name: linux arm64
        uses: addnab/docker-run-action@v3
        with:
          image: konsumer/node-raylib-builder:latest
          options: -v ${{ github.workspace }}:/workdir --platform linux/arm64
          run: |
            mkdir -p build-linux-arm64
            cd build-linux-arm64/
            cmake ..
            make
      - name: linux arm7
        uses: addnab/docker-run-action@v3
        with:
          image: konsumer/node-raylib-builder:latest
          options: -v ${{ github.workspace }}:/workdir --platform linux/arm/v7
          run: |
            mkdir -p build-linux-arm7
            cd build-linux-arm7/
            cmake ..
            make
      - name: Archive artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-linux
          path: build-linux-*/my_raylib_game
  

