name: Release

on: push

# this will build for window/linux on x86_64 and linux on aarch64/armhf and mac universal (x86_64/arm64)
# TODO: pre-build docker containers for linux aarch64/armhf


jobs:
  publish:
    runs-on: ubuntu
    needs: [windows, mac, linux]
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: zip windows
        uses: vimtor/action-zip@v1
        with:
          files: build-windows-x86_64/my_raylib_game.exe
          recursive: false
          dest: my_raylib_game-windows.zip
      - name: zip mac
        uses: vimtor/action-zip@v1
        with:
          files: build-mac-universal/my_raylib_game
          recursive: false
          dest: my_raylib_game-mac.zip
      - name: zip linux-x86_64
        uses: vimtor/action-zip@v1
        with:
          files: build-linux-x86_64/my_raylib_game
          recursive: false
          dest: my_raylib_game-linux-x86_64.zip
      - name: zip linux-aarch64
        uses: vimtor/action-zip@v1
        with:
          files: build-linux-aarch64/my_raylib_game
          recursive: false
          dest: my_raylib_game-linux-aarch64.zip
      - name: zip linux-armhf
        uses: vimtor/action-zip@v1
        with:
          files: build-linux-armhf/my_raylib_game
          recursive: false
          dest: my_raylib_game-linux-armhf.zip
      - name: create_release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            my_raylib_game-windows.zip
            my_raylib_game-mac.zip
            my_raylib_game-linux-x86_64.zip
            my_raylib_game-linux-aarch64.zip
            my_raylib_game-linux-armhf.zip
          
  
  windows:
    runs-on: windows-latest
    steps:
      - name: checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: windows x86_64
        run: |
          mkdir -p build-windows-x86_64
          cd build-windows-x86_64
          cmake .. -G "MinGW Makefiles"
          make

  mac:
    runs-on: macos-latest
    steps:
      - name: checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: mac universal
        run: |
          mkdir -p build-mac-universal
          cd build-mac-universal/
          cmake ..
          make
        env:
          CMAKE_OSX_ARCHITECTURES: "arm64;x86_64"
      
  linux:
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: setup
        run: |
          sudo apt-get update
          sudo apt-get install -y qemu qemu-system-misc qemu-user-static qemu-user binfmt-support
      - name: linux x86_64
        run: |
          sudo apt-get install -y xorg-dev libglu1-mesa-dev
          mkdir -p build-linux-x86_64
          cd build-linux-x86_64/
          cmake ..
          make
      - name: linux aarch64
        uses: addnab/docker-run-action@v3
        with:
          image: ubuntu:latest
          options: -v ${{ github.workspace }}:/workdir -w /workdir --platform linux/aarch64
          run: |
            apt-get update && apt-get install -y xorg-dev libglu1-mesa-dev cmake git g++
            mkdir -p build-linux-aarch64
            cd build-linux-aarch64/
            cmake ..
            make
      - name: linux armhf
        uses: addnab/docker-run-action@v3
        with:
          image: ubuntu:latest
          options: -v ${{ github.workspace }}:/workdir -w /workdir --platform linux/armhf
          run: |
            apt-get update && apt-get install -y xorg-dev libglu1-mesa-dev cmake git g++
            mkdir -p build-linux-armhf
            cd build-linux-armhf/
            cmake ..
            make
  

